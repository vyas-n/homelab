---
# Ansible Playbook Refs:
# - Syntax: https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#playbook-syntax
# - Collection Index: https://docs.ansible.com/ansible/latest/collections/index.html
# yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/schemas/main/f/ansible.json#/$defs/playbook

# Note: This playbook provisions my entire homelab and is designed to be idempotent.

- name: Deploy Apps to TrueNAS
  hosts: truenas
  pre_tasks:
    - name: Creates directory & intermediate directories
      ansible.builtin.file:
        path: "{{ item.name }}"
        state: directory
        owner: admin
        group: root
        # Set directories as 0770 & files as 0660
        # ref: https://stackoverflow.com/a/29793833
        mode: u=rwX,g=rwX
      loop:
        - name: /mnt/app1/apps/dockge/stacks
  vars:
    apps_fast_data_dir: /mnt/app1/apps
    apps_safe_data_dir: /mnt/data1/apps
    apps_dockge_stacks_dir: /mnt/app1/apps/dockge/stacks
  roles:
    - role: vyas.compose_deployments.homepage
    - role: vyas.compose_deployments.tsdproxy
    - role: vyas.compose_deployments.whats_up_docker
    - role: vyas.compose_deployments.uptime_kuma
# TODO: find an external-dns system for docker -compose apps
# - name: Deploy Traefik
#   ansible.builtin.import_playbook: ../truenas/apps/traefik/deploy.ansible-playbook.yml

# Provision MaaS
- name: Provision MaaS
  hosts: fedora_server
  roles:
    - role: vyas.linux.passwordless_sudo
      vars:
        passwordless_sudo_users:
          - vyas
  tasks:
    - name: Install snapd
      # ref: https://snapcraft.io/install/snapd/fedora#install
      become: true
      ansible.builtin.dnf:
        name:
          - snapd
        state: present

# Provision k8s nodes
- name: Provision k8s nodes
  hosts: k8s_wkr_1
  pre_tasks:
    # TODO: Make idempotent.
    # TODO: Run this task on all Fedora hosts.
    - name: Bootstrap a host without python dnf pkgs installed
      become: true
      ansible.builtin.raw: dnf install -y python3-libdnf5
  roles:
    - role: vyas.linux.passwordless_sudo
      vars:
        passwordless_sudo_users:
          - vyas
  tasks: []

# Provision Proxmox
- name: Provision Proxmox Hosts
  hosts: proxmox
  roles:
    - role: vyas.proxmox.shared_handlers
    - role: vyas.proxmox.install_tailscale
    - role: vyas.proxmox.fix_for_amd_gpu
      when: (has_amd_gpu is defined) and has_amd_gpu
  tasks:
    - name: Setup for PCIe Passthrough
      block:
        - name: Initialize kernel parameters variable
          ansible.builtin.set_fact:
            kernel_parameters:
              - root=ZFS=rpool/ROOT/pve-1
              - boot=zfs
              - iommu=pt
        - name: Template Kernel Parameters
          ansible.builtin.template:
            src: etc/kernel/cmdline.j2
            dest: /etc/kernel/cmdline
            owner: root
            group: root
            mode: "0644"
          notify:
            - Reboot machine
        - name: Initialize kernel modules variable
          ansible.builtin.set_fact:
            kernel_modules:
              - vfio
              - vfio_iommu_type1
              - vfio_pci
        - name: Template kernel modules
          ansible.builtin.template:
            src: etc/modules-load.d/proxmox.conf.j2
            dest: /etc/modules-load.d/proxmox.conf
            owner: root
            group: root
            mode: "0644"
          notify:
            - Refresh initramfs
    - name: Copy APT Repo sources
      # These files were modified to replace the default enterprise apt sources with the no-subscription variants
      # ref: https://pve.proxmox.com/wiki/Package_Repositories#sysadmin_no_subscription_repo
      ansible.builtin.copy:
        src: "{{ item.name }}"
        dest: /{{ item.name }}
        owner: root
        group: root
        mode: "0644"
      loop:
        - name: etc/apt/sources.list.d/ceph.list
        - name: etc/apt/sources.list.d/pve-enterprise.list
        - name: etc/apt/sources.list.d/pve-no-subscription.list
    - name: Install Tools
      ansible.builtin.apt:
        package:
          - fish
          - lldpd
        update_cache: true
        state: present
    - name: Make web interface accessible from standard HTTP/HTTPS ports
      # TODO: add steps to configure proxmox managed ACME certs before installing nginx
      # These steps were taken from: https://pve.proxmox.com/wiki/Web_Interface_Via_Nginx_Proxy
      block:
        - name: Install nginx
          ansible.builtin.apt:
            package:
              - nginx
            state: present
          notify:
            - RestartNginx
        - name: Ensure nginx is enabled & started
          ansible.builtin.systemd_service:
            name: nginx
            state: started
            enabled: true
        - name: Remove default nginx config files
          ansible.builtin.file:
            path: "{{ item.name }}"
            state: absent
          loop:
            - name: /etc/nginx/sites-enabled/default
            - name: /etc/nginx/conf.d/default
          notify:
            - RestartNginx
        - name: Create a new nginx config file
          vars:
            proxmox_fqdn_hostname: proxmox-1.hosts.vyas-n.dev
          ansible.builtin.template:
            src: "{{ item.name }}.j2"
            dest: /{{ item.name }}
            owner: root
            group: root
            mode: "0644"
          loop:
            - name: etc/nginx/conf.d/proxmox.conf
          notify:
            - ValidateNginxConf
            - RestartNginx
        - name: Ensure that nginx systemd service override directory exists
          ansible.builtin.file:
            dest: /etc/systemd/system/nginx.service.d
            owner: root
            group: root
            mode: "0755"
            state: directory
        # TODO: Ensure that nginx only gets started after ACME Certs are issued
        - name: Ensure that nginx only gets started after proxmox has started
          vars:
            proxmox_fqdn_hostname: proxmox-1.hosts.vyas-n.dev
          ansible.builtin.copy:
            src: "{{ item.name }}"
            dest: /{{ item.name }}
            owner: root
            group: root
            mode: "0644"
          loop:
            - name: etc/systemd/system/nginx.service.d/override.conf
          notify:
            - RestartNginx
        - name: Setup Nginx watcher to reload nginx anytime the certs rotate
          # ref: https://superuser.com/a/1531261
          # TODO: replace this with an nginx config that watches the file-system & reloads from nginx
          ansible.builtin.copy:
            src: "{{ item.name }}"
            dest: /{{ item.name }}
            owner: root
            group: root
            mode: "0644"
          loop:
            - name: etc/systemd/system/nginx-reloader.service
            - name: etc/systemd/system/nginx-watcher.path
          notify:
            - RestartNginxWatcher
        - name: Ensure nginx watcher is enabled
          ansible.builtin.systemd_service:
            name: "{{ item.name }}"
            enabled: true
          loop:
            - name: nginx-reloader
          notify:
            - RestartNginxWatcher

  handlers:
    - name: ValidateNginxConf
      # This command doesn't change anything, it just validates the nginx config
      changed_when: false
      ansible.builtin.command:
        cmd: nginx -t
    - name: RestartNginx
      ansible.builtin.systemd_service:
        name: nginx
        daemon_reload: true
        state: restarted
    - name: RestartNginxWatcher
      ansible.builtin.systemd_service:
        name: nginx-reloader
        daemon_reload: true
        state: restarted

- name: Disable macbook lid close turning the computer off
  # ref: https://youtu.be/FsPYgZYXyZw?si=HgeFVVoom-vbTYcs&t=481
  hosts: proxmox_1
  roles:
    - role: vyas.proxmox.shared_handlers
  tasks:
    - name: Ensure that logind drop-in directory exists
      ansible.builtin.file:
        dest: /etc/systemd/logind.conf.d
        owner: root
        group: root
        mode: "0755"
        state: directory
    - name: Let laptop close lid
      ansible.builtin.copy:
        src: "{{ item.name }}"
        dest: /{{ item.name }}
        owner: root
        group: root
        mode: "0644"
      loop:
        - name: etc/systemd/logind.conf.d/let-laptop-close-lid.conf
      notify:
        - Restart systemd-logind
