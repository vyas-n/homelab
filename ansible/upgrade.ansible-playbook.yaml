#!/usr/bin/env nix-shell
#! nix-shell -i "poetry run ansible-playbook" --packages poetry

# Ansible Playbook Refs:
# - Syntax: https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#playbook-syntax
# - Collection Index: https://docs.ansible.com/ansible/latest/collections/index.html
# yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/schemas/main/f/ansible.json#/$defs/playbook

# This playbook upgrades my entire homelab and is designed to:
#   - Avoid any downtime (if an step would cause downtime for a service, it doesn't belong in this playbook)
#   - Provide output showing if there's any additional manual steps needed

- name: Upgrade systems
  # TODO: figure out how to safely upgrade truenas
  hosts: all:!truenas
  tasks:
    - name: Upgrade Windows Systems
      when: ansible_facts['os_family'] == 'Windows'
      block:
        - name: Install all updates, but don't reboot
          ansible.windows.win_updates:
            category_names: "*"
          register: win_update
        - name: Notify if reboot is required
          when: win_update.reboot_required
          ansible.builtin.debug:
            msg: "{{ inventory_hostname }}: Reboot required: {{ win_update.reboot_required }}"
          changed_when: win_update.reboot_required

    - name: Upgrade Debian-based systems
      when: ansible_facts['os_family'] == "Debian"
      block:
        - name: Upgrade APT pkgs
          become: true
          ansible.builtin.apt:
            # Update all packages to their latest version
            name: "*"
            state: latest
            update_cache: true # Run the equivalent of "apt-get update" as a separate step
            autoremove: true # Remove dependencies that are no longer required
            autoclean: true # Remove useless packages from the cache
        - name: Check if reboot is required
          become: true
          # ref: https://askubuntu.com/a/171
          ansible.builtin.stat:
            path: /var/run/reboot-required
          register: reboot_required_check
          changed_when: reboot_required_check.stat.exists
        - name: Notify if reboot is required
          become: true
          when: reboot_required_check.stat.exists
          ansible.builtin.debug:
            msg: "{{ inventory_hostname }}: Reboot required: {{ reboot_required_check.stat.exists }}"
          changed_when: reboot_required_check.stat.exists

    - name: Upgrade Fedora systems
      when: ansible_facts['distribution'] == "Fedora"
      block:
        - name: Upgrade all packages
          become: true
          ansible.builtin.dnf:
            name: "*"
            state: latest
            # TODO: Explicitly use 'dnf5' if running fedora silverblue (or other derivatives such as bazzite)
            use_backend: "{{ 'dnf5' if ansible_hostname == 'gaming-vm-bazzite' else 'auto' }}"
        # ref: https://dnf-plugins-core.readthedocs.io/en/latest/needs_restarting.html
        - name: Install tool to check if reboot is required
          become: true
          ansible.builtin.dnf:
            name: dnf-plugins-core
            state: present
        - name: Check if reboot needed
          become: true
          register: check_restart
          ansible.builtin.command:
            cmd: dnf needs-restarting -r
          ignore_errors: true
          changed_when: check_restart.rc != 0
        - name: Notify if reboot is required
          when: check_restart.rc != 0
          ansible.builtin.debug:
            msg: |-
              {{ check_restart.stdout }}
          changed_when: check_restart.rc != 0

    - name: Upgrade all flatpaks
      when: ansible_facts['system'] == "Linux"
      block:
        - name: Check if flatpak binary exists
          ansible.builtin.stat:
            path: /usr/bin/flatpak
          register: flatpak_binary
        - name: Print a debug message
          ansible.builtin.debug:
            msg: "Flatpak isn't installed on this host, skipping upgrade"
          when: not flatpak_binary.stat.exists
        - name: Upgrade all flatpaks
          when: flatpak_binary.stat.exists
          # ref: https://www.reddit.com/r/ansible/comments/fk4qqc/comment/jlonhmf/
          ansible.builtin.command: flatpak update --noninteractive
          register: flatpak_update_output
          changed_when: "'app/' in flatpak_update_output.stdout"

    - name: Notify that a system without scripted upgrades is in the hosts.yaml file
      # At the moment, I only have debian systems that need to be upgraded.
      # But when I start managing other systems I want this playbook to upgrade those systems too.
      when: >
        ansible_facts['os_family'] not in ["Debian", "Windows"]
        and ansible_facts['distribution'] not in ["Fedora"]
      ansible.builtin.fail:
        msg: This system runs the linux distribution '{{ ansible_facts['distribution'] }}' and currently doesn't have upgrades scripted.
